
	One literal tab represents a unit of indent.

	One indent will be converted to an actual indent of 'shiftwidth'
	visual spaces.

	According to setting 'expandtab', indent is converted to <tab> or
	<space> respectively.

	: >
	abc
	\$


	$n
	${n}
	${n.0}
	${n[0]}
	${n.0/.*/ /}
	${n:abc}
	${n:$prev}
	${n:$(snipname)}
	${n:abc$(snipname)xyz$ph_name}
	${n:$(snipname)}
	${n:$(snipname abc$ph_name )}
	${n:$(snipname "abc$ph_name" )}
	${n:$(snipname 'abc$ph_name' )}

	$(snipname)
	$n
	${n}
	${n/a/b/gi}

	expr:
	expr = text; expr

<
	: >

	snip for
		for ( $i = 0; $i < ${n:10}; $i++ ) {
			$cursor
		}

	snip for
	set n=10 n.focus=$() n.live=$() n.post=$()
		for ( $i = 0; $i < ${n:10}; $i++ ) {
			$cursor
		}

	fuzzy for\.(\w+)=(\w)+(<|>=)(\w+)
		for ( $i = 0; $i < $n; $i++ ) {
			$cursor
		}

	snip (
	# (...)
	set q=partial_sel('(', '')
	set q[1].live=mirror_quote(${q[0]})
		$q$q

	fuzzy div(\.\w+)*
	# <div[ class="..."]
	set class=$(get_classes $_trigger)
		<div$class></div>

	snip func
	set arg='arg'
	set arg.post=$()
		def $name(${arg/.+/ /}${arg[0]}${arg/.+/ /}):
			$cursor

	forr
		$(for)


<


" vim:tw=78:ts=8:sw=8:sts=8:noet:ft=help:norl:
