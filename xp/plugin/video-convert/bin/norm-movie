#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
通过ffprobe获取视频的宽度和比特率，然后重命名视频文件，将这些信息追加到文件名中。
例如：将`filename.mp4`重命名为`MovieName-中文名-2010y-1920x-1000k.mp4`，
其中电影的名字是从 themoviedb.org 获取的
其中2010y表示年份， 1920x表示视频宽度，1000k表示比特率。

可选参数:
-n, --no-tmdb: 跳过TMDB查询，只添加宽度和比特率信息，例如 `filename-1920x-1000k.mp4`
"""

import os
import subprocess
import sys
import re
import argparse
from pathlib import Path
from tmdbv3api import TMDb, Movie
from pypinyin import lazy_pinyin, Style

def get_video_info(file_path):
    """Get video width and bitrate using ffprobe"""
    cmd = [
        'ffprobe',
        '-v', 'error',
        '-select_streams', 'v:0',
        '-show_entries', 'stream=width,bit_rate',
        '-of', 'default=noprint_wrappers=1:nokey=1',
        file_path
    ]
    
    result = subprocess.run(cmd, capture_output=True, text=True)
    width, bitrate = result.stdout.strip().split('\n')
    return int(width), int(bitrate)

def clean_filename(filename):
    # Remove common file extensions
    name = os.path.splitext(filename)[0]
    
    # Remove existing metadata pattern like -2010y-1920x-1000k
    # First, remove the full pattern (year, width and bitrate)
    name = re.sub(r'-\d{4}y-\d+x-\d+k$', '', name)
    
    # Next, check and remove just the width and bitrate pattern
    name = re.sub(r'-\d+x-\d+k$', '', name)
    
    # Finally, check and remove just the year pattern
    name = re.sub(r'-\d{4}y$', '', name)
    
    # Remove common quality indicators and other metadata
    patterns = [
        # Brackets and parentheses patterns
        r'\[.*?\]',  # Remove text in square brackets
        r'\(.*?\)',  # Remove text in parentheses
        
        # Common file naming patterns
        r'^\.+',  # Remove leading dots (common in some Asian filenames)
        r'^@+',   # Remove leading @ symbols
        r'^_+',   # Remove leading underscores
        r'_by_.*$',  # Remove attribution (_by_username)
        r'@.*$',  # Remove text after @ symbol
        
        # Common prefixes/separators
        r'^The\.',  # Remove "The." prefix
        r'^\d{2}\.\d{2}\.\d{2}\.', # Remove date-like prefixes (01.02.03.)
        r'^\(\w+\)',  # Remove language indicators like (eng)
        
        # Quality and format indicators
        r'\.\d{3,4}p',  # Remove resolution indicators
        r'\.HD(TV)?',  # Remove HDTV indicator
        r'\.DVD(rip|scr)?',  # Remove DVD indicators
        r'\.BluRay', r'\.WEB-DL', r'\.HDRip', r'\.BRRip',  # Remove quality indicators
        r'\.x264', r'\.x265', r'\.AAC', r'\.AC3',  # Remove codec indicators
        r'\.R\d', r'\.CAM', r'\.TS', r'\.PROPER', r'\.REPACK',  # Remove release type
        r'\.(KORSUB|VOSTFR|SUBBED)',  # Remove subtitle indicators
        r'\.(iNT|LiMiTED|INTERNAL)',  # Remove release attributes
        
        # Release group indications
        r'-(RARBG|YYeTs|PLAYNOW|YIFY|Ganool|AbSurd[iI]Ty|DiAMOND|DoNE|NeDiVx|iLG|VoMiT|TLF)',  # Remove release groups
        r'-(S-Files|MURDER|YSDG|FLAiTE|JYK|TDP|TOPAZ)',  # More release groups
        r'\.(ARROW|KAMERA|GENUiNE|TheWretched|LMG)',  # More release groups
        r'\.CD\d',  # Remove CD1, CD2 etc. (common in split files)
        
        # Language indicators
        r'\.(Chi|Eng|Chs|Cht|CN|GB|CnEn)(\.|$)',  # Remove language indicators
        r'\.SUB',  # Remove subtitle indicator
        r'\.中英(双语)?(字幕)?',  # Remove Chinese subtitle indicator
        r'\.双语字幕',  # Another Chinese subtitle format
        
        # Season/episode indicators for TV shows
        r'\.S\d{2}E\d{2}(\.\w+)?',  # Remove season/episode indicators like S01E01
        r'\.EP\d{2}(_\w+)?',  # Remove episode indicators like EP01
        
        # Assorted other patterns from the file list
        r'\.rmvb$', r'\.avi$', r'\.mkv$', r'\.mp4$',  # Remove any remaining file extensions
        r'-\d$',  # Remove trailing single digit (often used for parts)
        r'\.part\d+',  # Remove part indicators
        r'-(RARBG|YYeTs|JUSTiCE|CaRRe|BMDru|DoNE)$',  # Remove trailer release groups
        r'-\w{1,7}$',  # Remove short trailing codes
        
        # Names and translations - keep only the main title
        r'\.\d{4}\.',  # Remove year in middle of filename
        r'\-\d{4}$',  # Remove year at end
        r'[\.\-_]cd\d+$',  # Remove disc indicators
    ]
    
    for pattern in patterns:
        name = re.sub(pattern, '', name, flags=re.IGNORECASE)
    
    # Remove common Chinese/English title separator patterns
    name = re.sub(r'[\.\-_]((中文|英文|双语|国语|粤语|中英|简体|繁体|外挂)字幕)?$', '', name)
    
    # Handle special case of Chinese titles with English titles
    # If format is "ChineseTitle..EnglishTitle" or similar
    if '..' in name:
        parts = name.split('..')
        if len(parts) == 2:
            # Use English title when available
            name = parts[1]
    
    # Handle "MovieName.英文名" format
    name = re.sub(r'\.英文名$', '', name)
    
    # Replace dots, underscores and multiple spaces with single space
    name = re.sub(r'[\._]+', ' ', name)
    name = re.sub(r'\s+', ' ', name)
    
    # Replace hyphens surrounded by spaces with space
    name = re.sub(r'\s+\-\s+', ' ', name)
    
    # Keep hyphen between words
    name = re.sub(r'(\w)\-(\w)', r'\1 \2', name)
    
    return name.strip()

def display_movie_info(movie_results):
    # Convert results to a list and limit to 5 entries
    n = 10
    results_list = list(movie_results)
    display_results = results_list[:n] if len(results_list) > n else results_list
    
    # Display all found movies
    print("\nFound the following movies:")
    for idx, result in enumerate(display_results, 1):

        release_year = result.release_date.split('-')[0] if hasattr(result, 'release_date') and result.release_date else 'Unknown'
        original_title = result.original_title if hasattr(result, 'original_title') else 'N/A'
        overview = result.overview if hasattr(result, 'overview') else 'No overview available'
        
        print(f"\n{idx}. {result.title} ({release_year})")
        print(f"   Original Title: {original_title}")
        print(f"   Overview: {overview}")
    
    return display_results

def is_english(text):
    """Check if text contains only English characters"""
    if not text:
        return False
    # Check if all characters are ASCII (covers English letters, numbers, punctuation)
    return all(ord(c) < 128 for c in text)

def get_user_selection(display_results):
    # Get user confirmation
    while True:
        choice_input = input("\nEnter the number of the correct movie (or 0 to skip): ")
        
        try:
            choice = int(choice_input)
        except ValueError:
            print("Please enter a valid number.")
            continue
            
        if choice == 0:
            return None, None, None
            
        if 1 <= choice <= len(display_results):
            selected_movie = display_results[choice-1]
            
            # Extract movie information
            year = None
            if hasattr(selected_movie, 'release_date') and selected_movie.release_date:
                year = selected_movie.release_date.split('-')[0]
            
            # Get movie titles
            en_title = selected_movie.original_title if hasattr(selected_movie, 'original_title') else None
            zh_title = selected_movie.title if hasattr(selected_movie, 'title') else None
            
            return year, en_title, zh_title
            
        print("Invalid choice. Please try again.")

def format_english_title(title):
    """Format English title to contain only alphanumeric chars and hyphens, and capitalize each word"""
    if not title:
        return ""
    
    # Keep only alphanumeric and spaces
    cleaned = re.sub(r'[^a-zA-Z0-9\s]', '', title)
    
    # Replace spaces with hyphens and title-case each word
    formatted = '-'.join([word.capitalize() for word in cleaned.split()])
    return formatted

def get_pinyin_abbreviation(chinese_text):
    """Generate pinyin abbreviation from Chinese text using only first character's first letter"""
    if not chinese_text:
        return ""
    
    # Get first character only
    first_char = chinese_text[0]
    
    # Get pinyin for first character, only first letter, without tone
    pinyin_list = lazy_pinyin(first_char, style=Style.FIRST_LETTER, strict=False)
    
    # Get the first letter and convert to lowercase
    abbreviation = pinyin_list[0].lower() if pinyin_list else ""
    
    # Keep only alphabetic characters
    abbreviation = re.sub(r'[^a-z]', '', abbreviation)
    
    return abbreviation

def get_movie_info(filename):
    """Get movie year, English title and Chinese title"""
    # Initialize TMDB
    tmdb = TMDb()
    tmdb.api_key = os.environ.get('XP_SEC_TMDB_API_KEY')  # Get API key from environment variable
    tmdb.language = 'zh-CN'  # Set language to Chinese
    
    movie = Movie()
    clean_name = clean_filename(filename)
    print(f"\nSearching for movie with query: '{clean_name}'")
    
    # Search for the movie
    results = movie.search(clean_name)
    if results['total_results'] > 0:
        display_results = display_movie_info(results)
        year, en_title, zh_title = get_user_selection(display_results)
        
        # Check if original_title is actually in English
        if en_title and not is_english(en_title):
            # If original title is not English, don't use it
            en_title = None
            
        return year, en_title, zh_title
    else:
        print(f"No movies found for '{clean_name}'")
    
    return None, None, None

def rename_file(file_path, use_tmdb=True):
    """Rename file with English name, Chinese name, year, width, and bitrate information"""
    width, bitrate = get_video_info(file_path)
    bitrate_k = bitrate // 1000  # Convert to kbps
    
    path = Path(file_path)
    filename = path.name
    
    # Get movie information from TMDB if needed
    year, en_title, zh_title = None, None, None
    if use_tmdb:
        year, en_title, zh_title = get_movie_info(filename)
    
    # Format parts of the new filename
    year_part = f"-{year}y" if year else ""
    
    # Determine the base name and formatted parts for the new file
    if use_tmdb and en_title:
        # If we have English title, use it as the base name and add Chinese title
        base_name = format_english_title(en_title)
        formatted_zh_title = f"-{zh_title}" if zh_title else ""
    elif use_tmdb and zh_title:
        # If no English title but have Chinese title, use pinyin abbreviation as prefix
        pinyin_abbr = get_pinyin_abbreviation(zh_title)
        base_name = f"{pinyin_abbr}-{zh_title}" if pinyin_abbr else zh_title
        formatted_zh_title = ""
    else:
        # If no title from TMDB or not using TMDB, use original filename as the base
        base_name = path.stem
        formatted_zh_title = ""
    
    new_name = f"{base_name}{formatted_zh_title}{year_part}-{width}x-{bitrate_k}k{path.suffix}"
    new_path = path.parent / new_name
    
    # Ask for user confirmation before renaming
    print(f"\nAbout to rename:")
    print(f"    From: {path.name}")
    print(f"    To:   {new_name}")
    
    while True:
        confirm = input("\nConfirm rename? (y/n): ").lower()
        if confirm in ['y', 'yes']:
            os.rename(file_path, new_path)
            print(f"File renamed successfully.")
            break
        elif confirm in ['n', 'no']:
            print(f"Rename cancelled.")
            break
        else:
            print(f"Please enter 'y' or 'n'.")

def main():
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Rename video files with metadata information')
    parser.add_argument('video_file', help='Path to the video file')
    parser.add_argument('-n', '--no-tmdb', action='store_true', help='Skip TMDB query, only append width and bitrate')
    args = parser.parse_args()
    
    if not os.path.exists(args.video_file):
        print(f"File not found: {args.video_file}")
        sys.exit(1)
    
    rename_file(args.video_file, use_tmdb=not args.no_tmdb)

if __name__ == "__main__":
    main()
