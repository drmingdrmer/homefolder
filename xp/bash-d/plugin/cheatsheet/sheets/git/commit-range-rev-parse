# git help rev-parse

SPECIFYING RANGES
       History traversing commands such as git log operate on a set of commits, not just a single commit. To
       these commands, specifying a single revision with the notation described in the previous section means the
       set of commits reachable from that commit, following the commit ancestry chain.

       To exclude commits reachable from a commit, a prefix ^ notation is used. E.g. ^r1 r2 means commits
       reachable from r2 but exclude the ones reachable from r1.

       This set operation appears so often that there is a shorthand for it. When you have two commits r1 and r2
       (named according to the syntax explained in SPECIFYING REVISIONS above), you can ask for commits that are
       reachable from r2 excluding those that are reachable from r1 by ^r1 r2 and it can be written as r1..r2.

       A similar notation r1...r2 is called symmetric difference of r1 and r2 and is defined as r1 r2 --not $(git
       merge-base --all r1 r2). It is the set of commits that are reachable from either one of r1 or r2 but not
       from both.

       In these two shorthands, you can omit one end and let it default to HEAD. For example, origin.. is a
       shorthand for origin..HEAD and asks "What did I do since I forked from the origin branch?" Similarly,
       ..origin is a shorthand for HEAD..origin and asks "What did the origin do since I forked from them?" Note
       that .. would mean HEAD..HEAD which is an empty range that is both reachable and unreachable from HEAD.

       Two other shorthands for naming a set that is formed by a commit and its parent commits exist. The r1^@
       notation means all parents of r1. r1^! includes commit r1 but excludes all of its parents.

       To summarize:

       <rev>
           Include commits that are reachable from (i.e. ancestors of) <rev>.

       ^<rev>
           Exclude commits that are reachable from (i.e. ancestors of) <rev>.

       <rev1>..<rev2>
           Include commits that are reachable from <rev2> but exclude those that are reachable from <rev1>. When
           either <rev1> or <rev2> is omitted, it defaults to HEAD.

       <rev1>...<rev2>
           Include commits that are reachable from either <rev1> or <rev2> but exclude those that are reachable
           from both. When either <rev1> or <rev2> is omitted, it defaults to HEAD.

       <rev>^@, e.g. HEAD^@
           A suffix ^ followed by an at sign is the same as listing all parents of <rev> (meaning, include
           anything reachable from its parents, but not the commit itself).

       <rev>^!, e.g. HEAD^!
           A suffix ^ followed by an exclamation mark is the same as giving commit <rev> and then all its parents
           prefixed with ^ to exclude them (and their ancestors).

       Here are a handful of examples:

           D                G H D
           D F              G H I J D F
           ^G D             H D
           ^D B             E I J F B
           B..C             C
           B...C            G H D E B C
           ^D B C           E I J F B C
           C                I J F C
           C^@              I J F
           C^!              C
           F^! D            G H D F
