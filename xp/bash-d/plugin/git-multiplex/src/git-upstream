#!/bin/sh

source shlib.sh

main()
{
    local cmd="${1-update}"

    local root=$(git_working_root)
    [ "x$root" = "x" ] && die 'looking for git repo root'
    cd "$root"

    local conf_fn=./.gitupstream

    case "$cmd" in
        -h|--help)
            usage
            exit 0
            ;;
        init)
            init
            exit $?
            ;;
    esac


    git show git-upstream-config-branch:.gitupstream \
    | while read name url; do

        git remote add "$name" "$url"
        git remote set-url "$name" "$url"
        git fetch -p "$name"

    done
}

init()
{
    local conf_fn=./.gitupstream

    git checkout --orphan git-upstream-config-branch || die 'can not create branch'
    git rm --cache -r -f .
    git rm -r -f .
    vim "$conf_fn"
    git add "$conf_fn"
    git commit -m 'init git-upstream-config-branch'
}

usage()
{
    cat <<-END
usage: git upstream

    Manage upstream git repos.

    It creates a standalone branch "git-upstream-config-branch" to store config file
    thus the extra config file does not mess up other files.

    Install:

        -   Copy this script to a dir in PATH.
        -   Run following command to create a branch to store config:
                git upstream init

            Edit the configure file.
            Save and checkout to master.

    Configure file ".gitupstream" syntax:

        <upstream_name_1>     <upstream_url_1>
        <upstream_name_2>     <upstream_url_2>
        ...

    Example:
        > cat .gitupstream
        chriswolfvision     git@github.com:chriswolfvision/eplot.git


    With above config, "git upstream" will:

        -   Add missing remote.
        -   Try to set-url for each upstream.
        -   fetch -p the upstream repo.

END
}

main "$@"
