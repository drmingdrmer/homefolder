#!/bin/bash

usage()
{
    cat <<-END
Split one git history into two.

One of them only contains changes of specified files.
The other contains other changes(or optionally contains full history).

Usage:
    git-test-history <from>..[<to>] <script>

Synoposis:

    git-test-history master..HEAD make test

Arguments:

    <from> and <to> specifies history range to test-history.
    E.g. to test-history the latest 3 commit:

        git-test-history master~3..master

    <script>: command to test

END
}

source shlib.sh

merge=0
remove=0
orphan=0
to_strip=0

while getopts "h" opname; do
    case $opname in
        h)
            usage
            exit 0
            ;;
        [?])
            usage
            exit 1
            ;;
    esac
done

range=$1
shift
script="$@"

base=${range%..*}
if [ ".$base" = ".$range" ]; then
    usage
    exit 1
fi

tip=${range#*..}
if [ ".$tip" = "." ]; then
    tip=HEAD
fi

tip_hash=$(git_hash $tip)
head=$(git_head_branch)


test_history()
{
    local logfn=his.log
    local ok=ok

    >$logfn

    for c in $(git log --reverse $base..$tip_hash --format="%H"); do

        git checkout $c >/dev/null 2>&1 || die git checkout $c

        commit_hash="$(git log -n1 --format="%h" $c)"
        commit_subject="$(git log -n1 --format="%s" $c)"
        commit_time="$(git log -n1 --format="%ci" $c)"

        info $commit_hash $(clr green $commit_subject)
        info $commit_hash $(clr light cyan "$commit_time")
        info "> $script"

        output="$($script 2>&1)" || ok=fail

        if [ $ok == "ok" ]; then
            {
                echo "== $commit_subject"
                echo "OK     $script"
            } >> $logfn
            ok "> $script"
        else
            {
                echo "== $commit_subject"
                echo "FAIL   $script"
                echo "$output"
            } >> $logfn
            echo ""
            echo "$output"
            die "FAIL" $commit_subject
        fi
    done
    info OK log is in $logfn
}

info "test history: $range"
test_history
git checkout $head
