#!/bin/sh

usage()
{
    cat >&2 <<-END
	usage: git gotofix <fn>

	    Fix <fn> at the commit where <fn> is lastly modified.
	    And get HEAD back to where before using git-gotofix.

	    This script accomplish this by running a customized
	    git-rebase--interactive.

	Example:

	    # go to commit in which <fn> was modified. And VIM is
	    # automatically opened this file.
	    git gotofix <fn>

	    # hack..hack..

	    # get fix ready.
	    git add <fn>

	    # apply changes and go back to where you started.
	    git rebase --continue
	    # or discard changes and restore.
	    git rebase --abort
	END
}

source shlib.sh

obj=$1
is_obj_file=0

if test -z "$obj" || test "$obj" = "-h" || test "$obj" = "--help"; then
    usage
    exit 1
fi

if test "$(git cat-file -t $obj 2>/dev/null)" = "commit"
then
    commit=$obj
else
    # it is a file path
    # find the latest commit touched this file
    commit=$(git log -n1 --format="%h" "$obj")
    is_obj_file=1
fi

sed_remove_after_blank="'"'/^$/,$d'"'"

sed_edit_commit="s/pick $commit/edit $commit/"
# add quote
sed_edit_commit="'$sed_edit_commit'"

GIT_EDITOR='f(){ cat "$1" | sed '$sed_remove_after_blank' | sed '$sed_edit_commit' >"$1-tmp"; mv "$1-tmp" $1; }; f' \
    git rebase --interactive $commit~

if test "$is_obj_file" = "1"
then
    vim "$obj"
fi
