#!/bin/sh

usage()
{
    cat >&2 <<-END
	usage: git gotofix <fn>

	    Fix <fn> at the commit where <fn> is lastly modified.
	    And get HEAD back to where before using git-gotofix.

	    This script accomplish this by running a customized
	    git-rebase--interactive.

	Example:

	    # go to commit in which <fn> was modified. And VIM is
	    # automatically opened this file.
	    git gotofix <fn>

	    # hack..hack..

	    # get fix ready.
	    git add <fn>

	    # apply changes and go back to where you started.
	    git rebase --continue
	    # or discard changes and restore.
	    git rebase --abort
	END
}

source shlib.sh

obj=$1
is_obj_file=0
linenr=0
ori_linenr=0


if [ -z "$obj" ] || [ "$obj" = "-h" ] || [ "$obj" = "--help" ]; then
    usage
    exit 1
fi

if [ "$(git_object_type $obj)" = "commit" ]; then
    commit=$obj
else
    # it is a file path
    # find the latest commit touched this file
    is_obj_file=1
    if [ ".$2" != "." ]; then
        # gotofix <fn> <linenr>
        # get the commit last time edited this line
        commit=$(git blame "$obj" -L "$2",+1 -p | head -n1 | { read sha other; echo $sha; })
        ori_linenr=$(git blame "$obj" -L "$2",+1 -p | head -n1 | { read sha ori_linenr other; echo $ori_linenr; })
        info "going to commit: $commit $ori_linenr"
    else
        # find the last commit that changed any line of this file
        commit=$(git log -n1 --format="%h" "$obj")
    fi
fi

sed_remove_after_blank="'"'/^$/,$d'"'"

# only replace the first line
sed_edit_commit="1 s/pick /edit /"
# add quote
sed_edit_commit="'$sed_edit_commit'"

GIT_EDITOR='f(){ cat "$1" | sed '$sed_remove_after_blank' | sed '$sed_edit_commit' >"$1-tmp"; mv "$1-tmp" $1; }; f' \
    git rebase --interactive $commit~

if [ "$is_obj_file" = "1" ]; then
    vim "$obj" +$ori_linenr -c "normal zR"
    git rebase --continue
fi

