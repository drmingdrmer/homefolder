#!/bin/sh

source shlib.sh

main()
{
    local cmd="${1-update}"
    local match="$2"

    case "$cmd" in
        -h|--help)
            usage
            exit 0
            ;;
        init)
            init_config
            exit 0
            ;;
    esac


    local root=$(git_working_root)
    [ "x$root" = "x" ] && die 'looking for git repo root'

    local conf_fn=./.gitsubrepo

    cd "$root"

    [ -f .gitsubrepo_refs ] && rm .gitsubrepo_refs
    > .gitsubrepo_refs

    local base=
    local remote=
    local remote_suffix=
    local prefix=
    local url=
    local ref=
    local localtag=
    while read a b c d; do

        if [ "x$a" = "x" ] || [ "${a:0:1}" = "#" ]; then
            continue
        fi

        # [ base: xp/vim-d ]
        # declare base dir for following sub repo
        #
        # [ remote: https://github.com/ ]
        # declare remote base url for following sub repo
        if test "${a:0:1}" = '['
        then

            case $b in
                base:)
                    base="$c"
                    base="${base%%]}"
                    base="${base%/}/"
                    if test "$base" = "/"; then
                        base=
                    fi
                    ;;
                remote:)
                    remote="$c"
                    ;;
                remote_suffix:)
                    remote_suffix="$c"
                    ;;
                *)
                    echo "invalid tag: $b"
                    exit 1
            esac
            continue
        fi

        prefix="$a"
        url="$b"
        ref="$c"
        dir="$d"

        if [ "x$match" != "x" ] && ! fn_match "$prefix" *$match*; then
            continue
        fi

        if [ ".$cmd" = ".add" ]; then
            if [ -d "$prefix" ]; then
                continue
            fi
        fi

        # "xpt drmingdrmer/${prefix} master" is translated to "xpt drmingdrmer/xpt master"
        url=$(eval "echo $url")

        if test "${url%/}" != "$url"; then
            url="${url}$prefix"
        fi

        if test "${url:0:8}" != "https://" && test "${url:0:4}" != "git@"
        then
            url="${remote}${url}${remote_suffix}"
        fi

        fetch_remote "$base$prefix" "$url" "$ref" "$dir" &

    done<"$conf_fn"
    wait

    while read prefix url ref localtag dir; do

        dd "$prefix, $url, $ref, $localtag, $dir"


        local tag_hash=$(git_hash "$localtag") || die get hash of $localtag
        local tag_author_date=$(git_commit_date author "$localtag") || die get authoer date of $localtag
        local head_hash=$(git_hash HEAD)

        dd "tag_hash:   $tag_hash"
        dd "head_hash:  $head_hash"

        # clear old $prefix
        if [ -d "$prefix" ]; then
            git rm -r "$prefix" >/dev/null || die rm "$prefix"
        fi

        dd "add to ($prefix): from ($dir)"
        git_object_add_by_commit_path "$prefix" "$tag_hash" "$dir" || die git_object_add_by_commit_path

        # remove not in index files
        git checkout -- "$prefix" || die "checkout $prefix"

        # get tree object
        local tree=$(git write-tree) || die git write-tree
        dd "tree:       $tree"

        if [ "$tree" = "$(git_tree_hash HEAD)" ]; then
            info "Nothing changed: $prefix"
            continue
        fi

        local changes=
        local latest_hash=$(find_latest_squash "$prefix") || die find_latest_squash of "$prefix"

        if [ -n "$latest_hash" ]; then
            info "latest commit of $prefix: $latest_hash ($(git_commit_date author "$latest_hash"))"
            # add 4 space indent
            changes="$(git --no-pager shortlog $latest_hash..$tag_hash | awk '{print "    "$0}')"
        else
            info "latest commit of $prefix: not found"
        fi

        local commit=$(
        {
            cat <<-END
		Squashed $prefix $ref:$dir ${tag_hash:0:9} (${tag_author_date})

		url:      $url
		ref:      $ref
		sub-dir:  $dir

		localtag: $localtag $tag_hash

		git-subrepo-dir: $prefix
		git-subrepo-hash: $tag_hash

		changes: from ${latest_hash:0:9} ($(git_commit_date author "$latest_hash"))
		$changes
		END
        } | git commit-tree $tree -p $head_hash
        ) || die commit
        dd "commit:     $commit"

        git merge --ff-only --no-edit --commit $commit

    done<".gitsubrepo_refs"

    while read a b c localtag dir; do
        dd $a, $b, $c, $localtag, $dir
        git update-ref -d $localtag
    done<".gitsubrepo_refs"

    rm .gitsubrepo_refs
}

init_config()
{
    local root=$(git_working_root)
    [ "x$root" = "x" ] && die 'looking for git repo root'

    (
    cd $root

    if [ -f .gitsubrepo ]; then
        echo ".gitsubrepo already exists"
        return 0
    fi

    cat >.gitsubrepo <<-END
	[ remote_suffix: .git ]
	[ remote: https://github.com/ ]

	[ base: ]
	git-subrepo      baishancloud/git-subrepo       master   git-subrepo

	[ base: deps ]
	pykit            baishancloud/pykit             master


	# git-subrepo
	#   for maintaining sub git repo
	#   https://github.com/baishancloud/git-subrepo
	END

    vim .gitsubrepo
    git add .gitsubrepo
    echo "git commit to persistent .gitsubrepo config"
    )
}

find_latest_squash()
{
    # learned from git-subtree: find_latest_squash

    git log --grep="^Squashed $prefix " \
        --pretty=format:'START %H%n%b%nEND%n' HEAD |
    while read a b junk; do
        case $a in
            git-subrepo-hash:)
                echo $b
                return 0
                ;;
            esac
    done
}

fetch_remote()
{
    local prefix="$1"
    local url="$2"
    local ref="$3"
    local dir="$4"

    local localtag=refs/tags/_gitsubrepo/$prefix
    # git tag does not allow leading dot. E.g.: "refs/tags/_gitsubrepo/a/.b"
    localtag="${localtag//./-}"

    local mes="$url $ref -> $localtag"

    dd "Start fetching $mes"
    git fetch --no-tags "$url" "$ref:$localtag" || die fetch "$mes"
    echo "$prefix $url $ref $localtag" "$dir" >> .gitsubrepo_refs
    dd "Done fetching $mes"
}

usage()
{
    cat <<-END
usage: git subrepo

    Merge sub git repo into sub-directory in a parent git dir with git-submerge.
    git-subrepo reads config from ".gitsubrepo" resides in the root of parent
    git working dir.

    Configure file ".gitsubrepo" syntax:


        # set base of remote url to "https://github.com/"
        [ remote: https://github.com/ ]


        # set base of local dir to "plugin"
        [ base: plugin ]


        # <local dir>   <remote uri>            <ref to fetch>    [<dir>]
        gutter          airblade/vim-gitgutter  master            src


        # if <remote uri> ends with "/", <local dir> will be added after "/"
        ansible-vim     DavidWittman/           master


        # change base to "root"
        [ base: ]


        # use a specific commit 1a2b3c4
        ultisnips       SirVer/                 1a2b3c4


        # add a sub-directory
        ultisnips       SirVer/                 1a2b3c4           src


    With above config, "git subrepo" will:

    -   fetch master of https://github.com/DavidWittman/ansible-vim
        and put it in:
            <git-root>/plugin/ansible-vim

    -   fetch master of https://github.com/airblade/vim-gitgutter
        and put it in:
            <git-root>/plugin/gutter

    -   fetch commit 1a2b3c4 of https://github.com/SirVer/ultisnips
        and put it in:
            <git-root>/ultisnips

END
}

main "$@"
