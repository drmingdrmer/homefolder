#!/bin/sh

usage()
{
    cat >&2 <<-END
	usage: git gotofix <fn>

	    Fix <fn> at the commit where <fn> is lastly modified.
	    And get HEAD back to where before using git-gotofix.

	    This script accomplish this by running a customized
	    git-rebase--interactive.

	Example:

	    # go to commit in which <fn> was modified. And VIM is
	    # automatically opened this file.
	    git gotofix <fn>

	    # hack..hack..

	    # get fix ready.
	    git add <fn>

	    # apply changes and go back to where you started.
	    git rebase --continue
	    # or discard changes and restore.
	    git rebase --abort
	END
}

#include '_git_xp_lib.sh' begin
#!/bin/sh

_git_xp_verbose=1
_git_log_before=''
_git_log_after=''

die()
{
    echo "Failure $@" >&2
    exit 1
}
die_empty()
{
    if test -z "$1"
    then
        shift
        die empty: "$@"
    fi
}

set_verbose()
{
    _git_xp_verbose=${1-1}
}

log()
{
    local color="$1"
    local title="$2"
    shift
    shift

    local mes="$@"
    local NC="$(tput sgr0)"

    if [ -t 1 ]; then
        title="${color}${title}${NC}"
    fi
    echo "$(eval "$_git_log_before")""$title $mes""$(eval "$_git_log_after")"
}
dd()
{
    debug "$@"
}
debug()
{
    if [ ".$_git_xp_verbose" = ".1" ]; then
        local LightCyan="$(tput bold ; tput setaf 6)"
        log "$LightCyan" "$@"
    fi
}
info()
{
    local Brown="$(tput setaf 3)"
    log "$Brown" "$@"
}
mes()
{
    local Green="$(tput setaf 2)"
    log "$Green" "$@"
}
ok() {
    local Green="$(tput setaf 2)"
    log "${Green}"  "ok:  $@"
}
err() {
    local Red="$(tput setaf 1)"
    log "${Red}"    "err: $@"
}

_init_colors()
{
    Black="$(tput setaf 0)"
    BlackBG="$(tput setab 0)"
    DarkGrey="$(tput bold ; tput setaf 0)"
    LightGrey="$(tput setaf 7)"
    LightGreyBG="$(tput setab 7)"
    White="$(tput bold ; tput setaf 7)"
    Red="$(tput setaf 1)"
    RedBG="$(tput setab 1)"
    LightRed="$(tput bold ; tput setaf 1)"
    Green="$(tput setaf 2)"
    GreenBG="$(tput setab 2)"
    LightGreen="$(tput bold ; tput setaf 2)"
    Brown="$(tput setaf 3)"
    BrownBG="$(tput setab 3)"
    Yellow="$(tput bold ; tput setaf 3)"
    Blue="$(tput setaf 4)"
    BlueBG="$(tput setab 4)"
    LightBlue="$(tput bold ; tput setaf 4)"
    Purple="$(tput setaf 5)"
    PurpleBG="$(tput setab 5)"
    Pink="$(tput bold ; tput setaf 5)"
    Cyan="$(tput setaf 6)"
    CyanBG="$(tput setab 6)"
    LightCyan="$(tput bold ; tput setaf 6)"
    NC="$(tput sgr0)" # No Color
}

git_hash()
{
    git rev-parse $1 \
        || die "'git_hash $@'"
}
git_rev_list()
{
    # --parents
    # print parent in this form:
    #     <commit> <parent-1> <parent-2> ..

    git rev-list \
        --reverse \
        --topo-order \
        --default HEAD \
        --simplify-merges \
        "$@" \
        || die "'git rev-list $@'"
}
git_ver()
{
    local git_version=$(git --version | awk '{print $NF}')
    local git_version_1=${git_version%%.*}
    local git_version_2=${git_version#*.}
    git_version_2=${git_version_2%%.*}

    printf "%03d%03d" $git_version_1 $git_version_2
}
git_working_root()
{
    git rev-parse --show-toplevel
}

git_branch_default_remote()
{
    local branchname=$1
    git config --get branch.${branchname}.remote
}
git_branch_default_upstream_ref()
{
    local branchname=$1
    git config --get branch.${branchname}.merge
}
git_branch_default_upstream()
{
    git_branch_default_upstream_ref "$@" | sed 's/^refs\/heads\///'
}

git_head_branch()
{
    git symbolic-ref --short HEAD
}
#include '_git_xp_lib.sh' end

obj=$1
is_obj_file=0

if test -z "$obj" || test "$obj" = "-h" || test "$obj" = "--help"; then
    usage
    exit 1
fi

if test "$(git cat-file -t $obj 2>/dev/null)" = "commit"
then
    commit=$obj
else
    # it is a file path
    # find the latest commit touched this file
    commit=$(git log -n1 --format="%h" "$obj")
    is_obj_file=1
fi

sed_remove_after_blank="'"'/^$/,$d'"'"

sed_edit_commit="s/pick $commit/edit $commit/"
# add quote
sed_edit_commit="'$sed_edit_commit'"

GIT_EDITOR='f(){ cat "$1" | sed '$sed_remove_after_blank' | sed '$sed_edit_commit' >"$1-tmp"; mv "$1-tmp" $1; }; f' \
    git rebase --interactive $commit~

if test "$is_obj_file" = "1"
then
    vim "$obj"
fi
