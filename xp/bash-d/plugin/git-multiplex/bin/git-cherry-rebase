#!/bin/sh

#include '_git_xp_lib.sh' begin
#!/bin/sh

_git_xp_verbose=1
_git_log_before=''
_git_log_after=''

die()
{
    echo "Failure $@" >&2
    exit 1
}
die_empty()
{
    if test -z "$1"
    then
        shift
        die empty: "$@"
    fi
}

set_verbose()
{
    _git_xp_verbose=${1-1}
}

log()
{
    local color="$1"
    local title="$2"
    shift
    shift

    local mes="$@"
    local NC="$(tput sgr0)"

    if [ -t 1 ]; then
        title="${color}${title}${NC}"
    fi
    echo "$(eval "$_git_log_before")""$title $mes""$(eval "$_git_log_after")"
}
dd()
{
    debug "$@"
}
debug()
{
    if [ ".$_git_xp_verbose" = ".1" ]; then
        local LightCyan="$(tput bold ; tput setaf 6)"
        log "$LightCyan" "$@" >&2
    fi
}
info()
{
    local Brown="$(tput setaf 3)"
    log "$Brown" "$@"
}
mes()
{
    local Green="$(tput setaf 2)"
    log "$Green" "$@"
}
ok() {
    local Green="$(tput setaf 2)"
    log "${Green}"  "ok:  $@"
}
err() {
    local Red="$(tput setaf 1)"
    log "${Red}"    "err: $@"
}

_init_colors()
{
    Black="$(tput setaf 0)"
    BlackBG="$(tput setab 0)"
    DarkGrey="$(tput bold ; tput setaf 0)"
    LightGrey="$(tput setaf 7)"
    LightGreyBG="$(tput setab 7)"
    White="$(tput bold ; tput setaf 7)"
    Red="$(tput setaf 1)"
    RedBG="$(tput setab 1)"
    LightRed="$(tput bold ; tput setaf 1)"
    Green="$(tput setaf 2)"
    GreenBG="$(tput setab 2)"
    LightGreen="$(tput bold ; tput setaf 2)"
    Brown="$(tput setaf 3)"
    BrownBG="$(tput setab 3)"
    Yellow="$(tput bold ; tput setaf 3)"
    Blue="$(tput setaf 4)"
    BlueBG="$(tput setab 4)"
    LightBlue="$(tput bold ; tput setaf 4)"
    Purple="$(tput setaf 5)"
    PurpleBG="$(tput setab 5)"
    Pink="$(tput bold ; tput setaf 5)"
    Cyan="$(tput setaf 6)"
    CyanBG="$(tput setab 6)"
    LightCyan="$(tput bold ; tput setaf 6)"
    NC="$(tput sgr0)" # No Color
}

git_hash()
{
    git rev-parse $1 \
        || die "'git_hash $@'"
}
git_is_merge()
{
    test $(git cat-file -p "$1" | grep "^parent " | wc -l) -gt 1
}
git_parents()
{
    git rev-list --parents -n 1 ${1-HEAD} | { read self parents; echo $parents; }
}
git_rev_list()
{
    # --parents
    # print parent in this form:
    #     <commit> <parent-1> <parent-2> ..

    git rev-list \
        --reverse \
        --topo-order \
        --default HEAD \
        --simplify-merges \
        "$@" \
        || die "'git rev-list $@'"
}
git_tree_hash()
{
    git rev-parse "$1^{tree}"
}
git_ver()
{
    local git_version=$(git --version | awk '{print $NF}')
    local git_version_1=${git_version%%.*}
    local git_version_2=${git_version#*.}
    git_version_2=${git_version_2%%.*}

    printf "%03d%03d" $git_version_1 $git_version_2
}
git_working_root()
{
    git rev-parse --show-toplevel
}

git_branch_default_remote()
{
    local branchname=$1
    git config --get branch.${branchname}.remote
}
git_branch_default_upstream_ref()
{
    local branchname=$1
    git config --get branch.${branchname}.merge
}
git_branch_default_upstream()
{
    git_branch_default_upstream_ref "$@" | sed 's/^refs\/heads\///'
}

git_head_branch()
{
    git symbolic-ref --short HEAD
}

git_copy_commit()
{
    # We're going to set some environment vars here, so
    # do it in a subshell to get rid of them safely later
    dd copy_commit "{$1}" "{$2}" "{$3}"
    git log -1 --pretty=format:'%an%n%ae%n%ad%n%cn%n%ce%n%cd%n%s%n%n%b' "$1" |
    (
    read GIT_AUTHOR_NAME
    read GIT_AUTHOR_EMAIL
    read GIT_AUTHOR_DATE
    read GIT_COMMITTER_NAME
    read GIT_COMMITTER_EMAIL
    read GIT_COMMITTER_DATE
    export  GIT_AUTHOR_NAME \
        GIT_AUTHOR_EMAIL \
        GIT_AUTHOR_DATE \
        GIT_COMMITTER_NAME \
        GIT_COMMITTER_EMAIL \
        GIT_COMMITTER_DATE

    # (echo -n "$annotate"; cat ) |

    git commit-tree "$2" $3  # reads the rest of stdin
    ) || die "Can't copy commit $1"
}
#include '_git_xp_lib.sh' end

onto=

while [ $# -gt 0 ]; do

    case $1 in

        --onto)
            shift
            onto="$1"
            shift
            ;;
        *)
            break
            ;;

    esac
done

from=${1-HEAD~}
head_sha1=$(git_hash HEAD)

onto="${onto:-$from}"
onto="$(git_hash $onto)"

commits=""
for c in $(git log --first-parent  --format="%H" $from..$head_sha1); do
    commits="$c $commits"
done
commits=${commits% }

echo ""
echo "---- reset to $onto ----"
git reset --hard $onto

for hsh in $commits; do
    if git_is_merge $hsh; then
        info "---- cherry-pick $hsh (merge) ----"
        git cherry-pick -m1 $hsh

        # cherry-pick does not maintain secondary parent.
        tree=$(git_tree_hash HEAD)

        parents="$(git_parents $hsh)"

        # remove old first-parent, the first item.
        parents="$(echo $parents | while read first_parent other; do echo $other; done)"

        parents=" -p $(git rev-parse HEAD~) $(for p in $parents; do echo ' -p '$p; done)"

        # using the same tree create a commit with secondary parents
        new_commit=$(git log -n1 --format="%B" | git commit-tree $parents $tree)
        git reset --hard $new_commit
    else
        info "---- cherry-pick $hsh ----"
        git cherry-pick $hsh
    fi

done

exit
