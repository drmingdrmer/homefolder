#!/bin/bash

# args > env variables > default

# PS4='PROFILE: $(gdate "+%s.%N ($LINENO) + ")'

# arg | conf
cmd=$1
shift

flags=${1-}

if [ ".$flags" == ".-" ]; then
    flags=""
fi

screen_height=$(expr $(tput lines) - 8)

is_flags=1
nr_context=0
limit_lines=$screen_height

opt_all=""
opt_simplify_by_decoration=""
opt_cached=""
opt_date_order=""
opt_first_parent=""
opt_graph=""
opt_ignore_all_space=""
opt_format=""
opt_name_only=""
opt_patch=""
opt_relative=""
opt_reverse=""
opt_stat=""
opt_word_diff=""
opt_color_words=""

opt_unified=""

default_flags=""

dd()
{
    :
    # echo "$@" >&2
}

is_flag()
{
    local flags="$1"
    local k=
    local found=
    local len_shortcut=
    local shortcut=
    local option=
    local nr=


    while [ -n "${flags}" ]; do

        dd inner: $flags

        k=${flags:0:1}

        if [ "$k" = "-" ]; then
            flags=${flags:1}
            continue
        fi

        found=0
        while read shortcut option; do

            if test -z "$shortcut"; then
                continue
            fi

            len_shortcut=${#shortcut}

            if [ "${shortcut}" = "${flags:0:$len_shortcut}" ]; then

                dd found: [$shortcut] [$option]
                found=1
                flags=${flags:$len_shortcut}
            fi

        done <<<"$(echo "$git_comma_options" | grep "^${flags:0:1}" )"

        dd found: $found

        case $k in
            h)
                flags=${flags:1}
                found=1
                ;;
            [0123456789])
                nr="$nr$k"
                flags=${flags:1}
                found=1
                ;;
        esac

        if [ "$found" = "0" ]; then
            return 1
        fi
    done

    test -z "$nr" || test "$nr" -lt 100
}

apply_options()
{
    local flags="$1"
    local not=0
    local k=
    local found=
    local len_shortcut=
    local shortcut=
    local option=
    local option_name=
    local implied_flags=


    while [ -n "$flags" ]; do

        dd outer: $flags

        while [ -n "${flags}" ]; do

            dd inner: $flags

            k=${flags:0:1}

            if [ "$k" = "-" ]; then
                not=1
                flags=${flags:1}
                continue
            fi

            found=0
            while read shortcut option; do

                if test -z "$shortcut"; then
                    continue
                fi

                len_shortcut=${#shortcut}

                if [ "${shortcut}" = "${flags:0:$len_shortcut}" ]; then

                    dd found: [$shortcut] [$option]
                    found=1
                    option_name=$(echo "${option%%=*}" | tr "-" "_")
                    if [ "$not" = "1" ]; then
                        eval opt_$option_name'=""'
                    else
                        eval opt_$option_name'=" --'"$option"' "'
                    fi
                    flags=${flags:$len_shortcut}
                fi

            done <<<"$(echo "$git_comma_options" | grep "^${flags:0:1}" )"

            dd found: $found

            case $k in
                h) limit_lines=0
                    flags=${flags:1}
                    found=1
                    ;;
                [0123456789])
                    implied_flags="${implied_flags}p"
                    nr_context=${nr_context}$k
                    flags=${flags:1}
                    found=1
                    ;;
            esac

            not=0

            if [ "$found" = "0" ]; then
                # echo "not flag: k='$k'" >&2
                return 1
            fi
        done

        flags="$implied_flags"
        implied_flags=
    done
}

# apply_options "$default_flags"
apply_options "${GIT_COMMA_FLAG}"

# echo "cli-flags:$flags" >&2

if is_flag $flags; then
    is_flags=1
else
    is_flags=0
fi

if test "$is_flags" = "1"; then
    apply_options "$flags"
fi

dd is_flags: $is_flags

if [ -n "$opt_patch" ]; then
    limit_lines=0
    if [ "$nr_context" != 0 ]; then
        opt_unified=" --unified=$nr_context"
    fi
fi

# user defined format

if [ "$opt_format" = " --format=diff " ]; then
    opt_format=" --format=$git_comma_format_for_diff "
fi

if [ "$opt_format" = " --format=pullrequest " ]; then
    opt_format=" --format='### %s%+b%n' "
    opt_graph=""
fi

if [ "$cmd" = "conf" ]; then
    if [ "$is_flags" = "1" ]; then
        if [ "$limit_lines" != "0" ]; then
            echo " -c pager.log='head -n $screen_height'"
        fi
    fi
    exit 0
fi

_out="$(eval "echo $git_comma_option_expr")"
_out="$_out$opt_unified"

if [ "$is_flags" = "1" ]; then
    echo "$_out"
else
    dd not flags: $flags
    echo "$_out $flags"
fi
