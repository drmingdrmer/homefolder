#!/bin/bash

# PS4='$(gdate "+%s.%N ($LINENO) + ")'

git_option_no_edit="--no-edit"

one_changed='"$(git rev-parse --show-toplevel)/$(git diff --name-only HEAD | head -n1)"'
commit_message_one_file='"$(git status --porcelain | head -n1)"'

commands="\
a.   ,          add .
aa   ,          add --all
au   ,          add -u
c1   ,          commit -m $commit_message_one_file $one_changed           # commit one file
cc   ,          commit -m $commit_message_one_file                        # commit all staged(cached)
ca   ,          commit -m $commit_message_one_file -a                     # commit all staged(cached) or not
ci   ,          commit                                                    # commit
co   ,          checkout
d    ,          diff --color --find-renames
f    ,          fetch --prune
g    g,lo,      log --color --decorate --abbrev-commit --find-renames     # graph one screen
l    ld,        log --color --decorate --abbrev-commit --find-renames     # list mode, no graph, more info
3    ld,10      log --color --decorate --abbrev-commit --find-renames     # list mode, with diff
mc   ,          merge $git_option_no_edit --commit --no-ff
mf   ,          merge $git_option_no_edit --commit --ff-only
pu   ,          push
ra   ,          rebase --abort
rc   ,          rebase --continue
ri   ,          rebase --interactive
rp   ,          rebase --preserve-merges
rr   ,          rebase
RH   ,          reset --hard
sb   ,          status --short --branch                                   # status with branch info
sf   ,          diff --name-only --relative HEAD                          # status about file changes
st   ,          status
xI   ,          clean -dXf                                                # remove all ignored files
xi   ,          clean -dXfn                                               # remove all ignored files; dry run
xU   ,          clean -df                                                 # remove all untracked files
xu   ,          clean -dnf                                                # remove all untracked files; dry run
xX   ,          clean -dxf                                                # remove all untracked and ignored files
xx   ,          clean -dxfn                                               # remove all untracked and ignored files; dry run"

get_shortcut=0

shortcmd="$1"
shift

# , , to list all command
if [ "$shortcmd" = "," ]; then
    regex="${1-.}"
    echo
    echo "commands =================================================="
    echo
    echo "$commands" | grep "$regex"
    echo
    echo "flags ====================================================="
    echo
    echo "$git_comma_options"
    exit 0
fi

if [ "$shortcmd" = "list_shortcut" ]; then
    while read shortcut xx; do
        [ -z "$shortcut" ] && continue
        echo $shortcut
    done<<<"$commands"
    exit 0
fi

if [ "$shortcmd" = "get_shortcut" ]; then
    get_shortcut=1
    shortcmd="$1"
    shift
fi

found=0
while read shortcut flag cmd; do
    # [ -z "$shortcut" ] && continue
    len_shortcut=${#shortcut}
    if [ "$shortcut" = "${shortcmd:0:$len_shortcut}" ]; then
        export GIT_COMMA_FLAG="$(echo "$flag" | tr -d ',')"
        found=1
        cmd="${cmd%#*}"
        break
    fi
done<<<"$commands"

[ "$found" = "0" ] && {
    echo invalid command $shortcmd >&2
    exit 1
}

arg1=${shortcmd:$len_shortcut}

if [ "$get_shortcut" = "1" ]; then
    echo $shortcut
    exit 0
fi

eval git $(_git_xp_interrept_flag conf $arg1) \
    $cmd \
    "$(_git_xp_interrept_flag arg $arg1)" "$@" \
    || echo git $(_git_xp_interrept_flag conf $arg1) \
    $cmd \
    "$(_git_xp_interrept_flag arg $arg1)" "$@"

