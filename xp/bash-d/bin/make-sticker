#!/bin/bash

# usage:
# > make-coding-log.sh x.png title
#
# dependency:
# > brew install imagemagick

info()
{
    echo "$@"
}

# full_size: not to crop image
full_size=0

#   0: top
#  50: mid
# 100: bottom
text_pos=100

# add text for every <per_frame> frame
per_frame=0

while ``; do
    case $1 in
        -f)
            shift
            full_size=1
            ;;
        -m)
            shift
            text_pos=50
            ;;
        -p)
            shift
            text_pos=$1
            shift
            ;;
        -f)
            shift
            per_frame=$1
            shift
            ;;
        *)
            break
            ;;
    esac
done


path=$1
text=$2
color=${3-white}

base=${0%/*}

if [ "$full_size" = '1' ]; then

    convert -define jpeg:size=200 "$path" \
        -thumbnail 400 \
        -gravity center \
        -extent 400 tmp.gif
else
    convert -define jpeg:size=200x200 "$path" \
        -thumbnail 400x400^ \
        -gravity center \
        -extent 400x400 tmp.gif
fi

# gif returns multiple img_h
img_w=$(identify -ping -format '%w ' tmp.gif)
img_w=${img_w%% *}

img_h=$(identify -ping -format '%h ' tmp.gif)
img_h=${img_h%% *}

box_height=150

fontsize=120

font=$base/SimHei.ttf

convert -pointsize $fontsize -font "$font" \
    "label:$text"   tt.gif

let max_text_width=img_w*9/10
let max_text_height=img_h/5
text_w=$(identify -ping -format '%w' tt.gif)
text_h=$(identify -ping -format '%h' tt.gif)
info text max w/h: $max_text_width $max_text_height
info text initial w/h: $text_w $text_h
info text initial fontsize: $fontsize
if [ "$text_w" -gt "$max_text_width" ]; then
    let text_h=text_h*max_text_width/text_w
    let fontsize=fontsize*max_text_width/text_w
    let text_w=max_text_width
fi
if [ "$text_h" -gt "$max_text_height" ]; then
    let text_w=text_w*max_text_height/text_h
    let fontsize=fontsize*max_text_height/text_h
    let text_h=max_text_height
fi
let shadow_offset=3

info text adjusted w/h: $text_w $text_h
info text adjusted fontsize: $fontsize

rm tt.gif

# img_h - text_h/2 - fontsize/2 place text box right at bottom
# another fontsize/4 + 5 is padding to bottom
let text_top=img_h-text_h/2-fontsize*3/4-5
let text_top=text_top*text_pos/100
let text_shadow_top=text_top+shadow_offset

output_path="${path%.*}"
output_path="${output_path// /-}"
output_path="$text-${output_path}.gif"

if [ -L "./make-sticker-output" ]; then
    output_path="./make-sticker-output/$output_path"
fi

so=$shadow_offset
t=$text_top

convert tmp.gif \
    -weight 700 \
    -font "$font" \
    -pointsize $fontsize  \
    -weight 1600 \
    -draw "gravity north fill black  text $((so*0)),$((t+so*0)) '$text'" \
    -draw "gravity north fill black  text $((so*1)),$((t+so*0)) '$text'" \
    -draw "gravity north fill black  text $((so*2)),$((t+so*0)) '$text'" \
    -draw "gravity north fill black  text $((so*0)),$((t+so*1)) '$text'" \
    -draw "gravity north fill black  text $((so*2)),$((t+so*1)) '$text'" \
    -draw "gravity north fill black  text $((so*2)),$((t+so*2)) '$text'" \
    -draw "gravity north fill black  text $((so*0)),$((t+so*2)) '$text'" \
    -draw "gravity north fill black  text $((so*1)),$((t+so*2)) '$text'" \
    -draw "gravity north fill black  text $((so*2)),$((t+so*2)) '$text'" \
    -draw "gravity north fill $color text $((so*1)),$((t+so*1)) '$text'" \
    tmp2.gif

cp tmp2.gif tmp.gif

size_max=1024000
size_min=900000

# resize to less than 1M
perc_r=100
perc_l=100

eval $(stat -s tmp2.gif)
size_r=$st_size
perc_r=100

if [ "$st_size" -gt "$size_max" ]; then
    info size too large: $st_size gt $size_max, try to find lower bound...

    while ``; do
        eval $(stat -s tmp2.gif)

        if [ "$st_size" -gt "$size_max" ]; then

            let perc_r=perc_l
            let perc_l=perc_l/2
            convert -resize "$perc_l%" tmp.gif tmp2.gif
            info "adjust to $perc_l% ~ $perc_r%"
        else
            break
        fi
    done

    info "try to find in $perc_l% ~ $perc_r%"

    while ``; do

        let mid=perc_l+perc_r
        let mid=mid/2
        convert -resize "$mid%" tmp.gif tmp2.gif
        eval $(stat -s tmp2.gif)

        if [ "$st_size" -gt "$size_max" ]; then
            let perc_r=mid
        elif [ "$st_size" -lt "$size_min" ]; then
            let perc_l=mid
        else
            info finally resize to $mid%, size: $st_size
            break
        fi
        info "file size is $st_size, resize to $perc_l% ~ $perc_r%"
    done
fi

mv tmp2.gif "${output_path}"
